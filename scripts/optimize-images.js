#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PNG –≤ WebP –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const PUBLIC_DIR = path.join(__dirname, '../public');
const IMAGES_DIR = path.join(PUBLIC_DIR, 'images');

// –†–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const RESPONSIVE_SIZES = [640, 750, 828, 1080, 1200, 1920];

// –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const QUALITY_SETTINGS = {
  hero: 90,      // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  gallery: 85,   // –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
  avatar: 80,    // –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
  icon: 95,      // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–∫–æ–Ω–æ–∫
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
function checkDependencies() {
  const tools = ['cwebp', 'convert']; // ImageMagick
  
  for (const tool of tools) {
    try {
      execSync(`which ${tool}`, { stdio: 'ignore' });
      console.log(`‚úÖ ${tool} –Ω–∞–π–¥–µ–Ω`);
    } catch (error) {
      console.log(`‚ùå ${tool} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install webp imagemagick`);
      return false;
    }
  }
  return true;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function getImages(dir) {
  const images = [];
  const extensions = ['.png', '.jpg', '.jpeg'];
  
  function scanDir(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDir(fullPath);
      } else if (extensions.some(ext => item.toLowerCase().endsWith(ext))) {
        const size = stat.size;
        const relativePath = path.relative(PUBLIC_DIR, fullPath);
        images.push({ fullPath, relativePath, size, name: item });
      }
    }
  }
  
  scanDir(dir);
  return images;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ WebP
 */
function convertToWebP(inputPath, outputPath, quality = 85) {
  try {
    const command = `cwebp -q ${quality} "${inputPath}" -o "${outputPath}"`;
    execSync(command, { stdio: 'ignore' });
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${inputPath}:`, error.message);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function createResponsiveSizes(inputPath, outputDir, baseName, quality = 85) {
  const results = [];
  
  for (const width of RESPONSIVE_SIZES) {
    const outputPath = path.join(outputDir, `${baseName}-${width}w.webp`);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageMagick –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      const command = `convert "${inputPath}" -resize ${width}x -quality ${quality} "${outputPath}"`;
      execSync(command, { stdio: 'ignore' });
      
      const stat = fs.statSync(outputPath);
      results.push({
        width,
        path: outputPath,
        size: stat.size
      });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ ${width}px –¥–ª—è ${inputPath}:`, error.message);
    }
  }
  
  return results;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
 */
function getImageType(imagePath) {
  if (imagePath.includes('/users/')) return 'avatar';
  if (imagePath.includes('/gallery/')) return 'gallery';
  if (imagePath.includes('/logos/')) return 'icon';
  if (imagePath.includes('/hero/')) return 'hero';
  return 'gallery';
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
function optimizeImages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  if (!checkDependencies()) {
    console.log('\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.');
    process.exit(1);
  }
  
  const images = getImages(IMAGES_DIR);
  console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n`);
  
  let totalSavings = 0;
  let processedCount = 0;
  
  for (const image of images) {
    const imageType = getImageType(image.relativePath);
    const quality = QUALITY_SETTINGS[imageType];
    
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${image.relativePath} (${(image.size / 1024).toFixed(1)} KB)`);
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    const webpPath = image.fullPath.replace(/\.(png|jpe?g)$/i, '.webp');
    const webpExists = fs.existsSync(webpPath);
    
    if (!webpExists) {
      const success = convertToWebP(image.fullPath, webpPath, quality);
      
      if (success) {
        const webpStat = fs.statSync(webpPath);
        const savings = image.size - webpStat.size;
        totalSavings += savings;
        
        console.log(`  ‚úÖ WebP —Å–æ–∑–¥–∞–Ω: ${(webpStat.size / 1024).toFixed(1)} KB (—ç–∫–æ–Ω–æ–º–∏—è: ${(savings / 1024).toFixed(1)} KB)`);
      }
    } else {
      console.log(`  ‚è≠Ô∏è  WebP —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (image.size > 100 * 1024 && imageType === 'gallery') { // –ë–æ–ª—å—à–µ 100KB
      const dir = path.dirname(image.fullPath);
      const baseName = path.basename(image.fullPath, path.extname(image.fullPath));
      const responsiveDir = path.join(dir, 'responsive');
      
      if (!fs.existsSync(responsiveDir)) {
        fs.mkdirSync(responsiveDir, { recursive: true });
      }
      
      const responsiveSizes = createResponsiveSizes(image.fullPath, responsiveDir, baseName, quality);
      console.log(`  üì± –°–æ–∑–¥–∞–Ω–æ ${responsiveSizes.length} –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤`);
    }
    
    processedCount++;
    console.log('');
  }
  
  console.log('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${processedCount}`);
  console.log(`üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(totalSavings / 1024 / 1024).toFixed(2)} MB`);
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    processedImages: processedCount,
    totalSavings: totalSavings,
    averageSavings: totalSavings / processedCount
  };
  
  fs.writeFileSync(
    path.join(__dirname, 'optimization-report.json'),
    JSON.stringify(report, null, 2)
  );
  
  console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ scripts/optimization-report.json`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  optimizeImages();
}

module.exports = { optimizeImages };
